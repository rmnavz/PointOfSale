// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PointOfSale.Persistence;

namespace PointOfSale.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PointOfSale.Domain.Entities.Account", b =>
                {
                    b.Property<Guid>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("DateModified")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(255)");

                    b.HasKey("ID");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("PointOfSale.Domain.Entities.Account", b =>
                {
                    b.OwnsOne("PointOfSale.Domain.ValueObjects.Encrypted", "Password", b1 =>
                        {
                            b1.Property<Guid>("AccountID")
                                .HasColumnType("char(36)");

                            b1.Property<byte[]>("Hash")
                                .HasColumnType("longblob");

                            b1.Property<byte[]>("Salt")
                                .HasColumnType("longblob");

                            b1.HasKey("AccountID");

                            b1.ToTable("Accounts");

                            b1.WithOwner()
                                .HasForeignKey("AccountID");
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
